// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, email, is_chirpy_red
`

type CreateUserParams struct {
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

type CreateUserRow struct {
	ID          uuid.NullUUID `json:"id"`
	CreatedAt   sql.NullTime  `json:"created_at"`
	UpdatedAt   sql.NullTime  `json:"updated_at"`
	Email       string        `json:"email"`
	IsChirpyRed bool          `json:"is_chirpy_red"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red FROM users WHERE email=$1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const updateRed = `-- name: UpdateRed :one
UPDATE users
SET is_chirpy_red=$1
WHERE id=$2
RETURNING id, created_at, updated_at, email, is_chirpy_red
`

type UpdateRedParams struct {
	IsChirpyRed bool          `json:"is_chirpy_red"`
	ID          uuid.NullUUID `json:"id"`
}

type UpdateRedRow struct {
	ID          uuid.NullUUID `json:"id"`
	CreatedAt   sql.NullTime  `json:"created_at"`
	UpdatedAt   sql.NullTime  `json:"updated_at"`
	Email       string        `json:"email"`
	IsChirpyRed bool          `json:"is_chirpy_red"`
}

func (q *Queries) UpdateRed(ctx context.Context, arg UpdateRedParams) (UpdateRedRow, error) {
	row := q.db.QueryRowContext(ctx, updateRed, arg.IsChirpyRed, arg.ID)
	var i UpdateRedRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsChirpyRed,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email=$1,
hashed_password=$2,
updated_at=NOW()
WHERE id=$3
RETURNING id, created_at, updated_at, email, is_chirpy_red
`

type UpdateUserParams struct {
	Email          string        `json:"email"`
	HashedPassword string        `json:"hashed_password"`
	ID             uuid.NullUUID `json:"id"`
}

type UpdateUserRow struct {
	ID          uuid.NullUUID `json:"id"`
	CreatedAt   sql.NullTime  `json:"created_at"`
	UpdatedAt   sql.NullTime  `json:"updated_at"`
	Email       string        `json:"email"`
	IsChirpyRed bool          `json:"is_chirpy_red"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Email, arg.HashedPassword, arg.ID)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsChirpyRed,
	)
	return i, err
}
